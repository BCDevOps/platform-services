- hosts: localhost
  gather_facts: no
  vars:
    k8s_message_key: _secops_pathfinder_gov_bc_ca_networksecuritypolicy
  tasks:
    - import_role:
        name: "networksecuritypolicy"
    # - name: Debug Information 
    #   debug: 
    #     msg: "myvars = {{ hostvars[inventory_hostname] }}"
    - name: Generate policy ID
      command: openssl rand -base64 6
      register: openssl_cmd
    - name: Extract variables
      set_fact:
        puid: "{{ openssl_cmd.stdout }}"
        metadata: "{{ hostvars[inventory_hostname][k8s_message_key].metadata }}"
        spec: "{{ hostvars[inventory_hostname][k8s_message_key].spec }}"
    # Check if a the policy already exists. If so, return the ID
    # so it can be updated later in the playbook.
    - import_tasks: lookup_netpol.yaml
      vars:
        k8s_uuid: "{{ metadata.uid  }}"
        apo_namespace: "{{ lookup('env', 'APOCTL_BASE_NAMESPACE') }}/{{ metadata.namespace }}"
    # Create a policy if it does not already
    # exists.
    - import_tasks: create_netpol.yaml
      when: policy_id is not defined
      vars:
        pol_uuid: "{{ puid }}"
        k8s_uuid: "{{ metadata.uid }}"
        apo_namespace: "{{ lookup('env', 'APOCTL_BASE_NAMESPACE') }}/{{ metadata.namespace }}"
        netpol_spec: "{{ spec }}"
    - name: Finished
      when: policy_id is not defined
      meta: end_play
    # Update a policy if it already
    # exists.
    - import_tasks: update_netpol.yaml
      when: policy_id is defined
      vars:
        policy_id: "{{ policy_id }}"
        pol_uuid: "{{ puid }}"
        k8s_uuid: "{{ metadata.uid }}"
        apo_namespace: "{{ lookup('env', 'APOCTL_BASE_NAMESPACE') }}/{{ metadata.namespace }}"
        netpol_spec: "{{ spec }}"
    - name: Finished
      when: policy_id is defined
      meta: end_play
