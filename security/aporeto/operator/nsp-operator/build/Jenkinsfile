//
// Copyright Â© 2020 Province of British Columbia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Created by Jason Leach on 2020-01-03.
//

def pipelineName = 'secops-operator-master-pipeline'
def imageBuildConfigName = 'secops-operator'
def imageStreamName = 'secops-operator'
def watchPathRoot = 'security/aporeto/operator/secopspolicy'
def prodImageTag = 'prod'

def cancelIfRequired(path, buildName) {
    def filesInThisCommitAsString = sh(
        script:"git diff --name-only HEAD~1..HEAD | grep '^${path}/' || echo -n ''",
        returnStatus: false,
        returnStdout: true
    ).trim()
    def hasChangesInPath = (filesInThisCommitAsString.length() > 0)
    if (!hasChangesInPath) {
        // https://javadoc.jenkins.io/plugin/workflow-support/org/jenkinsci/plugins/workflow/support/steps/build/RunWrapper.html
        echo "No changes detected in ^${path}/, canceling build."
        // We could also do `oc delete build/` here if we want to remove
        // any trace of it from the OCP web console.
        sh "oc cancel-build build/${buildName}-${BUILD_ID}"
    }
}

pipeline {
    agent none
    options {
        disableResume()
    }

    stages {
        stage('Checks') {
            agent { label 'master' }
            steps {
                echo "Information"
                script {
                  sh "printenv"
                  sh "oc version"
                }

                echo "Checking for appropriate changes."
                script {
                    cancelIfRequired(watchPathRoot, pipelineName)
                }
            }
        }

        stage('Image Build') {
            agent { label 'master' }
            steps {
                echo "Starting image bulid ${imageBuildConfigName}"
                sh "oc start-build ${imageBuildConfigName} --follow --wait"
            }
        }

        stage('Promotion') {
            agent { label 'master' }
            steps {
                timeout(time: 4, unit: 'HOURS') {
                    // Any OCP authenticated user will have permission to execute
                    // this step and thus promote images.
                    input message: "Promote this image to prod?", submitter: 'authenticated'
                }
                
                script {
                    def imageHash = sh(
                        script: """oc get istag ${imageStreamName}:latest -o template --template=\"{{.image.dockerImageReference}}\" | awk -F \":\" \'{print \$3}\'""",
                        returnStatus: false,
                        returnStdout: true
                    ).trim()
                    echo "Last image ID in stream ${imageStreamName} is ${imageHash}."
                    sh "oc tag ${imageStreamName}:${imageHash} ${imageStreamName}:${prodImageTag}"
                }
            }
        }
    }
}
