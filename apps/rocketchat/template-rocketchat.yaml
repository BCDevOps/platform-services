kind: Template
apiVersion: v1
metadata:
  name: rocket-chat
  annotations:
    description: "Rocket.Chat Deployment"
    iconClass: "icon-nodejs"
    tags: "nodejs,mongodb,replication,instant-app"

parameters:
  - name: APPLICATION_NAME
    description: The name assigned to the application
    displayName: Application Name
    required: true
    value: rocketchat

  - name: ROCKETCHAT_IMAGE
    description: Location of the RocketChat Image
    displayName: RocketChat Image
    value: registry.hub.docker.com/library/rocket.chat
    required: true

  - name: ROCKETCHAT_IMAGE_NAME
    description: Location of the RocketChat Image
    displayName: RocketChat Image
    value: "rocket.chat"
    required: true

  # specify the version
  - name: ROCKETCHAT_IMAGE_TAG
    description: Name of the RocketChat tag that should be used
    displayName: RocketChat Tag
    value: "2.4.1"
    required: true

  - name: FILE_UPLOAD_STORAGE_SIZE
    description: The size of storage to allocate for file uploads to RocketChat
    displayName: File Upload Storage Size
    required: true

  # specify the storage class
  - name: SC_FILE_UPLOAD
    description: The Storage Class for the RocketChat uploads volume
    displayName: File Uploads Storage Class 
    required: true

  - name: HOSTNAME_HTTPS
    description: Hostname serving the application
    displayName: Route Name
    required: true

  - name: ROCKETCHAT_ADMIN_PASSWORD
    displayName: "RocketChat Admin Password"
    description: "Password for the RocketChat admin user."
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true

  - name: ROCKETCHAT_REPLICAS
    description: Number of RocketChat replica pods
    displayName: RocketChat Replicas
    required: true

  - name: ROCKETCHAT_MIN_HPA
    description: Min Number of RocketChat pods for HPA
    displayName: RocketChat Min HPA
    required: true

  - name: ROCKETCHAT_MAX_HPA
    description: Max Number of RocketChat pods for HPA
    displayName: RocketChat Max HPA
    required: true
  
  - name: MEMORY_REQUEST
    description: Amount of Memory to Request.
    displayName: Memory Request
    required: true

  - name: MEMORY_LIMIT
    description: Amount of Memory to Limit.
    displayName: Memory Limit
    required: true

  - name: CPU_REQUEST
    description: Amount of CPU to Request.
    displayName: Memory Request
    required: true

  - name: CPU_LIMIT
    description: Amount of CPU to Limit.
    displayName: Memory Limit
    required: true

  - name: MONGODB_SECRET_NAME
    displayName: MongoDB Secret.
    description: Name of the Secret containing MongoDB Assets
    value: "mongodb"

# Rocket Chat Environment Variables
  - name: FILEUPLOAD_ENABLED
  - name: FILEUPLOAD_STORAGE_TYPE
  - name: FILEUPLOAD_PROTECTFILES
  - name: FILEUPLOAD_FILESYSTEMPATH
  - name: FILEUPLOAD_MAXFILESIZE
  - name: FILEUPLOAD_MEDIATYPEWHITELIST
  - name: SHOW_SETUP_WIZARD
  - name: LAYOUT_LOGIN_TERMS
  - name: RETENTIONPOLICY_ENABLED
  - name: RETENTIONPOLICY_APPLIESTOCHANNELS
  - name: RETENTIONPOLICY_MAXAGE_CHANNELS
  - name: RETENTIONPOLICY_APPLIESTOGROUPS
  - name: RETENTIONPOLICY_MAXAGE_GROUPS
  - name: RETENTIONPOLICY_APPLIESTODMS
  - name: RETENTIONPOLICY_MAXAGE_DMS
  - name: RETENTIONPOLICY_FILESONLY
  - name: ACCOUNTS_TWOFACTORAUTHENTICATION_ENABLED
  - name: ACCOUNTS_REGISTRATIONFORM
  - name: ACCOUNTS_ALLOWREALNAMECHANGE
  - name: ACCOUNTS_ALLOWPASSWORDCHANGE
  - name: ACCOUNTS_SHOWFORMLOGIN
  - name: ACCOUNTS_SEND_EMAIL_WHEN_ACTIVATING
  - name: ACCOUNTS_SEND_EMAIL_WHEN_DEACTIVATING

objects:
# Keep an istag in each namespace as no build is needed
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${ROCKETCHAT_IMAGE_NAME}
    spec:
      lookupPolicy:
        local: false
      tags:
      - annotations: null
        from:
          kind: DockerImage
          name: ${ROCKETCHAT_IMAGE}:${ROCKETCHAT_IMAGE_TAG}
        importPolicy: {}
        name: "${ROCKETCHAT_IMAGE_TAG}"
        referencePolicy:
          type: Source

  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: rocketchat-config
    data:
      #Admin user
      ADMIN_USERNAME: "admin"
      ADMIN_PASS: "${ROCKETCHAT_ADMIN_PASSWORD}"
      #File Upload Settings
      OVERWRITE_SETTING_FileUpload_Enabled: "${FILEUPLOAD_ENABLED}"
      OVERWRITE_SETTING_FileUpload_Storage_Type: "${FILEUPLOAD_STORAGE_TYPE}"
      OVERWRITE_SETTING_FileUpload_ProtectFiles: "${FILEUPLOAD_PROTECTFILES}" 
      OVERWRITE_SETTING_FileUpload_FileSystemPath: "${FILEUPLOAD_FILESYSTEMPATH}"
      OVERWRITE_SETTING_FileUpload_MaxFileSize: "${FILEUPLOAD_MAXFILESIZE}"
      OVERWRITE_SETTING_FileUpload_MediaTypeWhiteList: "${FILEUPLOAD_MEDIATYPEWHITELIST}" 
      #General Settings
      OVERWRITE_SETTING_Site_Url: "https://${HOSTNAME_HTTPS}"
      OVERWRITE_SETTING_Site_Name: "${HOSTNAME_HTTPS}"
      OVERWRITE_SETTING_Show_Setup_Wizard: "${SHOW_SETUP_WIZARD}"
      OVERWRITE_SETTING_Layout_Login_Terms: "${LAYOUT_LOGIN_TERMS}"
      #Retention Settings
      OVERWRITE_SETTING_RetentionPolicy_Enabled: "${RETENTIONPOLICY_ENABLED}"
      OVERWRITE_SETTING_RetentionPolicy_AppliesToChannels: "${RETENTIONPOLICY_APPLIESTOCHANNELS}"
      OVERWRITE_SETTING_RetentionPolicy_MaxAge_Channels: "${RETENTIONPOLICY_MAXAGE_CHANNELS}"
      OVERWRITE_SETTING_RetentionPolicy_AppliesToGroups: "${RETENTIONPOLICY_APPLIESTOGROUPS}" 
      OVERWRITE_SETTING_RetentionPolicy_MaxAge_Groups: "${RETENTIONPOLICY_MAXAGE_GROUPS}"
      OVERWRITE_SETTING_RetentionPolicy_AppliesToDMs: "${RETENTIONPOLICY_APPLIESTODMS}"
      OVERWRITE_SETTING_RetentionPolicy_MaxAge_DMs: "${RETENTIONPOLICY_MAXAGE_DMS}" 
      OVERWRITE_SETTING_RetentionPolicy_FilesOnly: "${RETENTIONPOLICY_FILESONLY}"
      #Account Settings
      OVERWRITE_SETTING_Accounts_TwoFactorAuthentication_Enabled: "${ACCOUNTS_TWOFACTORAUTHENTICATION_ENABLED}"
      OVERWRITE_SETTING_Accounts_RegistrationForm: "${ACCOUNTS_REGISTRATIONFORM}"
      OVERWRITE_SETTING_Accounts_AllowRealNameChange: "${ACCOUNTS_ALLOWREALNAMECHANGE}"
      OVERWRITE_SETTING_Accounts_AllowPasswordChange: "${ACCOUNTS_ALLOWPASSWORDCHANGE}"
      OVERWRITE_SETTING_Accounts_ShowFormLogin: "${ACCOUNTS_SHOWFORMLOGIN}"
      OVERWRITE_SETTING_Accounts_Send_Email_When_Activating: "${ACCOUNTS_SEND_EMAIL_WHEN_ACTIVATING}"
      OVERWRITE_SETTING_Accounts_Send_Email_When_Deactivating: "${ACCOUNTS_SEND_EMAIL_WHEN_DEACTIVATING}"
      # Messaging Settings
      OVERWRITE_SETTING_Message_AllowSnippeting: "True"

      ## Rooms
      # DevOps Alerts
      # Random - Default
      # DevOps Questions Community
      # CSI Lab
      # DevOps Platform Team
      # Kudos - Default
      # DevOps Request
      ## Permissions 
      # Users- Manage Own Integrations: Enabled

  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        as-copy-of: "template.rocketchat-config-secret"
      name: rocketchat-config-secret
    stringData:
      CONTENT: placeholder for content from template.rocketchat-config-secret

  # Service for the Rocketchat NodeJS service
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - name: 3000-tcp
        port: 3000
        protocol: TCP
        targetPort: 3000
      selector:
        app: ${APPLICATION_NAME}
        deploymentConfig: ${APPLICATION_NAME}
      type: ClusterIP
      SessionAffinity: None
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${APPLICATION_NAME}
      annotations:
        description: Route for application's http service.
      labels:
        app: ${APPLICATION_NAME}
    spec:
      host: "${HOSTNAME_HTTPS}"
      port:
        targetPort: 3000-tcp
      to:
        kind: Service 
        name: ${APPLICATION_NAME}
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect

  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: rocketchat-uploads
    spec:
      storageClassName: ${SC_FILE_UPLOAD}
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: ${FILE_UPLOAD_STORAGE_SIZE}
      volumename: rocketchat-uploads

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      strategy:
        type: Recreate
        # TODO: redirect the route to Static pages in pre hook?
      triggers:
      - type: ConfigChange
      replicas: "${ROCKETCHAT_REPLICAS}"
      selector:
        app: "${APPLICATION_NAME}"
        deploymentConfig: "${APPLICATION_NAME}"
      template:
        metadata:
          labels:
            app: "${APPLICATION_NAME}"
            deploymentConfig: "${APPLICATION_NAME}"
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values: 
                    - ${APPLICATION_NAME}
                topologyKey: "kubernetes.io/hostname"
          volumes:
            - name: rocketchat-uploads
              persistentVolumeClaim:
                claimName: "rocketchat-uploads"
          containers:
          - env:
            - name: MONGO_URL
              valueFrom:
                secretKeyRef:
                  key: mongo-url
                  name: "${MONGODB_SECRET_NAME}"
            - name: MONGO_OPLOG_URL
              valueFrom:
                secretKeyRef:
                  key: mongo-oplog-url
                  name: "${MONGODB_SECRET_NAME}"
            envFrom: 
              - configMapRef:
                  name: rocketchat-config
              - secretRef:
                  name: rocketchat-config-secret
            image: "${ROCKETCHAT_IMAGE_NAME}:${ROCKETCHAT_IMAGE_TAG}"
            volumeMounts:
              - name: rocketchat-uploads
                mountPath: /app/uploads
            name: "${APPLICATION_NAME}"
            ports:
            - containerPort: 3000
              protocol: TCP
            terminationMessagePath: /dev/termination-log
            livenessProbe:
              httpGet:
                path: /api/info
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 120
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /api/info
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 120
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 3
            resources:
              limits:
                cpu: "${CPU_LIMIT}"
                memory: "${MEMORY_LIMIT}"
              requests:
                memory: "${MEMORY_REQUEST}"
                cpu: "${CPU_REQUEST}"
          restartPolicy: Always
          terminationGracePeriodSeconds: 30

  - apiVersion: autoscaling/v1
    kind: HorizontalPodAutoscaler
    metadata:
      name: rocketchat-hpa
    spec:
      scaleTargetRef:
        kind: DeploymentConfig 
        name: ${APPLICATION_NAME}
        apiVersion: apps.openshift.io/v1
        subresource: scale
      minReplicas: ${ROCKETCHAT_MIN_HPA}
      maxReplicas: ${ROCKETCHAT_MAX_HPA}
      cpuUtilization:
        targetCPUUtilizationPercentage: 80
