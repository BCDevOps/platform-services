
apiVersion: v1
kind: List
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: {{ envoy_service_name  }}
    labels:
      app: {{ envoy_service_name  }}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: {{ envoy_service_name  }}
    template:
      metadata:
        labels:
          app: {{ envoy_service_name  }}
      spec:
        containers:
        - image: envoyproxy/envoy-alpine:{{ envoy_version }}
          imagePullPolicy: Always
          name: {{ envoy_service_name  }}
          ports:
            - containerPort: 10000
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/envoy/
              name: {{ envoy_service_name  }}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
          - configMap:
              defaultMode: 420
              name: {{ envoy_service_name  }}-config
            name: {{ envoy_service_name  }}
- apiVersion: v1
  data:
    envoy.yaml: |-
      admin:
        access_log_path: "/dev/stdout"
        address:
          socket_address: { address: 127.0.0.1, port_value: 9901 }

      static_resources:
        listeners:
        - name: listener_0
          address:
            socket_address: { address: 0.0.0.0, port_value: 10000 }
          filter_chains:
          - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
                stat_prefix: ingress_http
                codec_type: AUTO
                access_log:
                - name: envoy.file_access_log
                  config:
                    path: "/dev/stdout"   
                route_config:
                  name: local_route
                  virtual_hosts:
                  - name: local_service
                    domains: ["*"]
                    request_headers_to_add:
                    - header:
                        key: "authorization"
                        value: "Bearer makeitup" #Use an ENV var once this is created by Grafana
                      append: true
                    routes:
                    - match:
                        prefix: "/"
                      route: 
                        cluster: grafana 
                http_filters:
                - name: envoy.router
        clusters:
        - name: grafana
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: grafana
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: grafana
                      port_value: 3000
  kind: ConfigMap
  metadata:
    name: {{ envoy_service_name  }}-config
    labels: 
      app: {{ envoy_service_name  }}

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: {{ envoy_service_name  }}
    name: {{ envoy_service_name  }}
  spec:
    host: {{ route }}
    port:
      targetPort: 10000-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: {{ envoy_service_name  }}
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: {{ envoy_service_name  }}
    name: {{ envoy_service_name  }}
  spec:
    ports:
      - name: 10000-tcp
        port: 10000
        protocol: TCP
        targetPort: 10000
    selector:
      app: {{ envoy_service_name  }}
    sessionAffinity: None
    type: ClusterIP