--- 
- name: Configure Grafana
  block: 
  - name: Wait for Grafana to be ready...
    shell: "oc get pods -n {{ namespace }} | grep Running | grep grafana | awk '{print $2}'"
    register: pod_ready
    until: pod_ready.stdout == "1/1"
    retries: 50
    delay: 10
  - name: Get Route
    shell: "oc get routes -n {{ namespace }} | grep grafana | awk '{print $2}'"
    register: grafana_route
  - name: Get existing admin password
    shell: oc set env dc/grafana --list -n {{ namespace }} | grep GF_SECURITY_ADMIN_PASSWORD | awk -F "=" '{print $2}'
    register: grafana_admin_password
  - name: Generate admin password
    set_fact:
      grafana_admin_pwd: "{{ pwd_alias }}"
      admin_default: true
      generated_pwd: true
    when: grafana_admin_password.stdout | length == 0
  - name: Set password variable
    set_fact: 
      grafana_admin_pwd: "{{ grafana_admin_password.stdout }}"
      admin_default: false
    when: generated_pwd == false
  - name: Wait for Grafana service to be ready
    uri: 
      url: "https://{{ grafana_route.stdout }}"
      status_code: 200
    register: grafana_result
    until: grafana_result.status == 200
    retries: 120
    delay: 1
    changed_when: false
  - name: Reset admin password
    uri: 
      url: "https://{{ grafana_route.stdout }}/api/admin/users/1/password"
      method: PUT
      user: "admin"
      password: "admin"
      force_basic_auth: true
      return_content: true
      headers: 
        Content-Type: application/json
      body_format: json
      body: {"password": "{{ grafana_admin_pwd }}"}
    when: admin_default == true
  - name: Add grafana admin password to deployment
    shell: "oc set env dc/grafana GF_SECURITY_ADMIN_PASSWORD={{ grafana_admin_pwd }} -n {{ namespace }}"
    when: admin_default == true
  - name:  Set light theme 
    shell: "oc set env dc/grafana GF_USERS_DEFAULT_THEME='light' -n {{ namespace }}"
  - name: Get existing API keys
    uri: 
      url: "https://{{ grafana_route.stdout }}/api/auth/keys"
      method: GET 
      user: "admin"
      password: "{{ grafana_admin_pwd }}"
      force_basic_auth: true
      return_content: true
      headers: 
        Content-Type: application/json
    register: existing_keys
    ignore_errors: true
  - set_fact: 
      existing_api_key: true
    when: existing_keys | length > 0 
  # - set_fact: 
  #     api_key_query: "[?name =='public'].id"
  #   when: existing_api_key == true 
  #   ignore_errors: true 
  - set_fact: 
      admin_api_key_query: "[?name =='admin'].id"
    when: existing_api_key == true
    ignore_errors: true
  # - set_fact: 
  #     public_api_id: "{{ existing_keys.content | from_json | json_query(api_key_query) | replace('[', '') | replace(']', '') }}"
  #   when: existing_api_key == true
  - set_fact: 
      admin_api_id: "{{ existing_keys.content | from_json | json_query(admin_api_key_query) | replace('[', '') | replace(']', '') }}"
    when: existing_api_key == true  
  # - name: Delete existing public viewer API key
  #   uri: 
  #     url: "https://{{ grafana_route.stdout }}/api/auth/keys/{{ public_api_id }} "
  #     method: DELETE 
  #     user: "admin"
  #     password: "{{ grafana_admin_pwd }}"
  #     force_basic_auth: true
  #     return_content: true
  #     headers: 
  #       Content-Type: application/json
  #   ignore_errors: true
  #   when: existing_api_key == true  
  - name: Delete existing admin viewer API key
    uri: 
      url: "https://{{ grafana_route.stdout }}/api/auth/keys/{{ admin_api_id }} "
      method: DELETE 
      user: "admin"
      password: "{{ grafana_admin_pwd }}"
      force_basic_auth: true
      return_content: true
      headers: 
        Content-Type: application/json
    ignore_errors: true
    when: existing_api_key == true  
  # - name: Create new public viewer API key
  #   uri: 
  #     url: "https://{{ grafana_route.stdout }}/api/auth/keys"
  #     method: POST
  #     user: "admin"
  #     password: "{{ grafana_admin_pwd }}"
  #     force_basic_auth: true
  #     return_content: true
  #     headers: 
  #       Content-Type: application/json
  #     body_format: json
  #     body: {"name": "public", "role": "Viewer"}
  #   register: grafana_apikey
  - name: Create new admin API key
    uri: 
      url: "https://{{ grafana_route.stdout }}/api/auth/keys"
      method: POST
      user: "admin"
      password: "{{ grafana_admin_pwd }}"
      force_basic_auth: true
      return_content: true
      headers: 
        Content-Type: application/json
      body_format: json
      body: {"name": "admin", "role": "Admin"}
    register: grafana_admin_apikey
  # - name: Add api key to envoy ConfigMap
  #   template: 
  #     src: "manifests/templates/template-configmap-envoy.yml.j2"
  #     dest: "manifests/configmap-envoy.yml"
  # - name: Reapply envoy configmap
  #   k8s_raw:
  #     state: present
  #     src: manifests/configmap-envoy.yml
  #     namespace: "{{ namespace }}"
  # - name: Redeploy Envoy
  #   command: "oc delete pod -l app=envoy -n {{ namespace }} --grace-period=0"
  - name: Configure Grafana Datasource
    grafana_datasource:
      name: "Prometheus"
      grafana_url: "https://{{ grafana_route.stdout }}"
      grafana_user: "admin"
      grafana_password: "{{ grafana_admin_pwd }}"
      org_id: "1"
      ds_type: "prometheus"
      url: "http://prometheus:9090"
      state: present
  - name: Generate and apply dashboard
    include_tasks: generate_dashboard.yml  
    ignore_errors: true
  - name: Get dashboard uid
    uri: 
      url: https://{{ grafana_route.stdout }}/api/search?folderIds=0&query=&starred=false
      method: GET
      user: "admin"
      password: "{{ grafana_admin_pwd }}"
      force_basic_auth: true
      return_content: true
    register: dashboard_list
  - name:  Set home dashboard
    uri:
      url: https://{{ grafana_route.stdout }}/api/org/preferences
      method: PUT
      body_format: json
      body: '{"homeDashboardId": {{ dashboard_list.json[0].id }} }'
      user: "admin"
      password: "{{ grafana_admin_pwd }}"
      force_basic_auth: true
      return_content: true
  - name: Export dashboard
    grafana_dashboard:
      grafana_url: https://{{ grafana_route.stdout }}
      grafana_user: "admin"
      grafana_password: "{{ grafana_admin_pwd }}"
      org_id: 1
      state: export
      uid: "{{ dashboard_list.json[0].uid  }}"
      path: "tmp-dashboard.json"
  - name: Change uid of dashboard
    replace:
      path: tmp-dashboard.json
      regexp: '"uid": "{{ dashboard_list.json[0].uid  }}"'
      replace: '"uid": "homedashboard"'
  - name: Import updated dashboard
    grafana_dashboard:
      grafana_url: https://{{ grafana_route.stdout }}
      grafana_user: "admin"
      grafana_password: "{{ grafana_admin_pwd }}"
      state: present
      message: Updated by ansible
      overwrite: yes
      path: tmp-dashboard.json
- name: Configure Prometheus targets
  block: 
  - name: set fact from yaml file
    set_fact: 
      url_watchlist: "{{ lookup ('file', '../url_watchlist.yml') | from_yaml  }}"
  - name: Create new prometheus configmap
    template: 
      src: manifests/templates/template-prometheus-configmap.yml.j2
      dest: manifests/template-prometheus-configmap.yml
  - name: Apply new configmap
    k8s_raw:
      state: present
      src: manifests/template-prometheus-configmap.yml
      namespace: "{{ namespace }}"

